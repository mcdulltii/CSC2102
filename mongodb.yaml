apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: psd2
  labels:
    app: mongodb
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    app: mongodb
---
apiVersion: v1
kind: Secret
metadata:
  name: mongosecret
  namespace: psd2
type: Opaque
data:
  mongosecret: |-
    RmRWWVoxWUFzcUZEcFQvazJQWHZFK25nMXpUTGgvL1QzaUZMS2UyMWVkdlhkWGZxTysvYjlTVFNL
    cnA3Vk5ZUgpsUjE3UUovZHR0NTRvRWIwSFhTTU9FeTdTVklhWXo2Zk82SElURmx4MlU3aHliWDJp
    M1M4YmN1ZTQ1SEFFQ240ClJvMG5nQTlaamVWQ1pxYW1FZnVDUFVEMk9OaGRjOTJ5R2RoVjlMYndl
    WWQvd2ZhTWJ6ZXhwUnU3L0pSdzI2UlIKSVJXU0VWci9QQjJyWFRhTlJuOEU3cDZkOXFxWWJ4UkxZ
    dWVjUml3V29EQ2lLSkl0Y0xkNGNydURnTTR5V1Y4VgptcFp1M1p6VDF1T0ZuanBMdEpaVjQzOWVB
    NlRiUG9XR0NVZTVhaDYzaGxVaCsyUDNlYjZxOW1PQlpjb2NVYjBICmtHMWZXZ3pkaWl3c2p0MjJK
    WE5uaFNYUjhQN21OYTlSM1JQRDhKMS9uVHhLN1JnWmJrU1E4WTBtQ05HcEIrRHEKSUdLaW9JbURo
    c3pjeXhNVmFpaFFhNnhFbkU3Z3dyZ2ZJT0phY0dURFhJMnB0WWNMMmZldmMwamFZNU9qZTR2dQpZ
    QkpVbm1MNjVYVHBrRksweHlQU21OZDR1cGljQlU4UVppVytIL0NuU1pxSFJycStFVENsY2xHTVQw
    Y1J1OVl3CjhJNm1BdG1sU0VmbkdyZzFSZEZkSjhJK1BZOWl2OHJOOW50cVBsSXphSTFRbUhjL0xY
    VlZYODZUQTBiS2pINE0KWXBUb3BiK2RNS2UwdjQreVU5dWxZZ1BVTXZBMVBybzNJRW9kQVY3Yy9D
    L01hWlo0MEdMVFUxUkJBWVNTWGZoMwo0MkRkRXM5bStqWFNUblRmamsyZTZuTFVEM2trTkRaMU5y
    b3FKZXMyaGlkNmE3SnJUUk9kSnpaZU85aXgwT2tZClNScVYzWFBnN3BuWkdPUURWMkw2MTNvYTVu
    M1FXbUN3NVh2R1VoUmM0V2xIUVRUV3liNXNUeUoyaWNKL2VkTVYKTEV5a2QwUUtuaXlOZmVHR0pj
    VEt0UTNUQS9VeUo3d1JOcTdhaFVXa0RHakxtK3Y2RzdwaEw4dFpGQ01KeVhOVQo1ZGswWmxyU1Nq
    RW9yWFNqMllKekhySFJ0MzZpc29kV0xtN05mREdnU0FMdzFwL0U4RDgxNmU1bmFneUxKdnRDCldX
    bTFGZGJCRHZqaEtXMFg2SVZCMTU5WlUydFdNZDRCS09BYWViYzZIODUwcEpEbEZKQVp4a09lWS8w
    U1FUOXQKd3JUM2kwVktORDRLdHlkMzNhcGRTby93ZHlSVwo=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongod
  namespace: psd2
spec:
  serviceName: mongodb
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      namespace: psd2
      labels:
        app: mongodb
    spec:
      affinity:
        # This is to prevent mongodb replicas from ending up on the same
        # host machine
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: replicaset
                  operator: In
                  values:
                  - MainRepSet
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongod-container
          image: mongo
          imagePullPolicy: Always
          env:
          - name: STATEFULSET_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MACHINE_MEMORY
            value: &machineMemory "500Mi"
          - name: MONGO_USER
            value: "root"
          - name: MONGO_PASSWORD
            value: "password"
          command:
            - "bash"
            - "-c"
            #the default cache size guidance is: "50% of RAM minus 1 GB, or 256 MB"
            # Which is why the wired tiger cache size is this way. This assumes 2gb of memory
            # on the host machine. The plan is to change 0.25 to a calculated value
            # by passing an environment variable that contains the host machines memory
            # and automatically "personalizing" mongo to the machine its running on
            - |
              numactl --interleave=all mongod --wiredTigerCacheSizeGB 0.25 --bind_ip 0.0.0.0 \
              --replSet MainRepSet --auth --clusterAuthMode keyFile \
              --keyFile /etc/secrets-volume/mongosecret \
              --setParameter authenticationMechanisms=SCRAM-SHA-1 \
              --fork --logpath /var/log/mongod.log \
              &&
              if [ $STATEFULSET_NAME == "mongod-0" ];
              then
                initiated=0
                replica_exists=false
                while [ "$replica_exists" != true ]
                do
                  # Need to check to make sure that the other pods are currently up
                  initiated=`mongosh --quiet --eval 'rs.initiate({_id: "MainRepSet", version: 1, members: [
                         { _id: 0, host : "mongod-0.mongodb.psd2.svc.cluster.local:27017" },
                         { _id: 1, host : "mongod-1.mongodb.psd2.svc.cluster.local:27017" },
                         { _id: 2, host : "mongod-2.mongodb.psd2.svc.cluster.local:27017" }
                   ]})["ok"]'`;
                  replica_exists=`mongosh --quiet --eval 'db.isMaster()["ismaster"]'`;
                   # Shit we need to check rs status i think instead
                  echo "Replica exists: " $replica_exists;
                  sleep 2
                done
                # If everything else is workign then we need to create an admin user
                mongosh --eval "db.getSiblingDB('admin').createUser({
                      user : \"$MONGO_USER\",
                      pwd  : \"$MONGO_PASSWORD\",
                      roles: [ { role: 'root', db: 'admin' } ]
                });"
                echo "STATEFULSET_NAME: $STATEFULSET_NAME \n MACHINE_MEMORY: $MACHINE_MEMORY";
              fi && tail -f /var/log/mongod.log
          # resources:
          #   requests:
          #     cpu: 1
          #     memory: 300Mi
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: secrets-volume
              # readOnly: true
              mountPath: /etc/secrets-volume
            - name: mongodb-persistent-storage-claim
              mountPath: /data/db
      volumes:
        - name: secrets-volume
          secret:
            secretName: mongosecret
            # https://coderstoolbox.net/number/
            # Convert to octal to decimal because kube only accepts
            # decimal as input
            defaultMode: 256
  volumeClaimTemplates:
  - metadata:
      name: mongodb-persistent-storage-claim
      namespace: psd2
      annotations:
        volume.beta.kubernetes.io/storage-class: "fast"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 500Mi
---
# Local storage
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast
  namespace: psd2
provisioner: k8s.io/minikube-hostpath
